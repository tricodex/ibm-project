import React, { useState, useEffect, useRef } from 'react'
import { useWatson } from '@/hooks/useWatson'
import styles from './Chat.module.css'
import { MessageSquare, X, Send } from 'lucide-react'

interface ChatProps {
  isVisible?: boolean
}

interface Message {
  id: string
  content: string
  sender: 'user' | 'ai'
}

const Chat: React.FC<ChatProps> = ({ isVisible = true }) => {
  const [isOpen, setIsOpen] = useState(false)
  const [messages, setMessages] = useState<Message[]>([])
  const [input, setInput] = useState('')
  const { generateText, isLoading } = useWatson()
  const messagesEndRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    console.debug('Chat component mounted or updated, scrolling to the latest message')
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [messages])

  const handleSendMessage = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    console.debug('handleSendMessage triggered with input:', input)

    if (!input.trim()) {
      console.debug('Input is empty, aborting send')
      return
    }

    const userMessage: Message = {
      id: Date.now().toString(),
      content: input,
      sender: 'user',
    }
    console.debug('User message created:', userMessage)

    setMessages((prev) => {
      console.debug('Adding user message to state:', userMessage)
      return [...prev, userMessage]
    })
    setInput('')
    console.debug('Input cleared after sending message')

    try {
      console.debug('Calling generateText with input:', input)
      const response = await generateText({
        input: input,
        modelId: 'GRANITE_13B_CHAT_V2',
        projectId: process.env.NEXT_PUBLIC_WATSONX_AI_PROJECT_ID || '',
        parameters: {
          max_new_tokens: 150,
        },
      })

      console.debug('Received response from generateText:', response)

      if (response) {
        const aiMessage: Message = {
          id: (Date.now() + 1).toString(),
          content: response.generated_text,
          sender: 'ai',
        }
        console.debug('AI message created:', aiMessage)

        setMessages((prev) => {
          console.debug('Adding AI message to state:', aiMessage)
          return [...prev, aiMessage]
        })
      } else {
        console.warn('No response generated by Watson API')
      }
    } catch (error) {
      console.error('Error during message handling:', error)
    }
  }

  if (!isVisible) {
    console.debug('Chat component is not visible, returning null')
    return null
  }

  return (
    <>
      {!isOpen && (
        <button
          onClick={() => {
            console.debug('Opening chat')
            setIsOpen(true)
          }}
          className={styles.chatToggle}
          aria-label="Open chat"
        >
          <MessageSquare />
        </button>
      )}
      {isOpen && (
        <div className={styles.chatContainer}>
          <div className={styles.chatHeader}>
            <h2 className={styles.chatTitle}>AI Assistant</h2>
            <button
              onClick={() => {
                console.debug('Closing chat')
                setIsOpen(false)
              }}
              className={styles.closeButton}
              aria-label="Close chat"
            >
              <X />
            </button>
          </div>
          <div className={styles.messagesContainer}>
            {messages.map((message) => (
              <div
                key={message.id}
                className={`${styles.message} ${
                  message.sender === 'user' ? styles.userMessage : styles.aiMessage
                }`}
              >
                {message.content}
              </div>
            ))}
            <div ref={messagesEndRef} />
          </div>
          <form onSubmit={handleSendMessage} className={styles.inputContainer}>
            <input
              type="text"
              value={input}
              onChange={(e) => {
                console.debug('Input changed:', e.target.value)
                setInput(e.target.value)
              }}
              placeholder="Type your message..."
              className={styles.input}
              disabled={isLoading}
            />
            <button type="submit" className={styles.sendButton} disabled={isLoading} title='Submit'>
              <Send size={20} />
            </button>
          </form>
        </div>
      )}
    </>
  )
}

export default Chat
